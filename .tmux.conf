source "/Library/Python/2.7/site-packages/powerline/bindings/tmux/powerline.conf"

# Use C-s instead of C-b
unbind C-b
set -g prefix C-s
bind -r C-s send-prefix

# * Source config
unbind r # unbind default binding to force redraw of attached client
bind   r source-file ~/.tmux.conf \; display "Finished sourcing ~/.tmux.conf ."

# Split with logical key bindings
# Also use the current pane path when splitting
bind - split-window -v -c '#{pane_current_path}'
bind \ split-window -h -c '#{pane_current_path}'

# Also create new windows with the current path context
bind c new-window -c '#{pane_current_path}'

# start pane indices at 1
set -g pane-base-index 1

# start window indices at 1
set -g base-index 1 

# automatically renumber the windows
# http://unix.stackexchange.com/questions/21742/renumbering-windows-in-tmux
set -g renumber-windows on

# Scrolling works as expected
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# set scrollback history to 10000 (10k)
set -g history-limit 10000

# Smart pane switching with awareness of vim splits
# # See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Easily resize splits
bind -n S-Up resize-pane -U 1
bind -n S-Down resize-pane -D 1
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2

# Easily resize splits MOAR
bind -n C-Up resize-pane -U 5
bind -n C-Down resize-pane -D 5
bind -n C-Left resize-pane -L 10
bind -n C-Right resize-pane -R 10

# C-l is taken over by vim style pane navigation
bind C-l send-keys 'C-l'

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Break pane to new window
bind b break-pane -d

# Use emacs style keybindings for the command line
set -g status-keys "emacs"
#
# Setup 'v' to begin selection as in Vim
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Create or attach to session from a session
bind C-b send-keys 'tat && exit' 'C-m'

# Kill the current session and go to the next session
bind K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# New mutt split
bind m split-window -h 'reattach-to-user-namespace mutt'

# Make C-j display a selectable list of sessions
# bind C-j choose-tree
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# TODO File
bind t split-window -h -c ~/ "vim todo.md"

# SSH More easier
bind C-k command-prompt -p "ssh command:"  "split-window -h \; send-keys 'ssh %%' C-m"

# Open a page in lynx browser
bind C-u command-prompt -p "URL:"  "split-window -h \; send-keys 'lynx %%' C-m"

# Easily swap a pane (targeted by pane number) with the current pane
bind s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# bind key for synchronizing panes
bind y set-window-option synchronize-panes

# # Status line things
# set -g default-terminal "screen-256color"
# set -g status-justify "left"
# set -g status "on"
# set -g status-left-style "none"
# set -g message-command-style "fg=colour7,bg=colour11"
# set -g status-right-style "none"
# set -g pane-active-border-style "fg=colour3"
# set -g status-utf8 "on"
# set -g status-style "bg=colour0,none"
# set -g message-style "fg=colour7,bg=colour11"
# set -g pane-border-style "fg=colour11"
# set -g status-right-length "100"
# set -g status-left-length "100"
# setw -g window-status-activity-style "fg=colour3,bg=colour0,none"
# setw -g window-status-separator ""
# setw -g window-status-style "fg=colour10,bg=colour0,none"
# set -g status-left "#[fg=colour0,bg=colour2] #S #[fg=colour2,bg=colour0,nobold,nounderscore,noitalics]#[fg=colour1,bg=colour0] #F #[fg=colour0,bg=colour13,nobold,nounderscore,noitalics]#[fg=colour0,bg=colour13] #W #[fg=colour13,bg=colour0,nobold,nounderscore,noitalics]"
# set -g status-right "#[fg=colour12,bg=colour0,nobold,nounderscore,noitalics]#[fg=colour0,bg=colour12] #(spotify) #[fg=colour0,bg=colour0] #(battery -t)  #[fg=colour8,bg=colour0,nobold,nounderscore,noitalics]#[fg=colour0,bg=colour8] %d %b %Y  %R "
# setw -g window-status-format "#[fg=colour0,bg=colour0,nobold,nounderscore,noitalics]#[default] #I  #W #[fg=colour0,bg=colour0,nobold,nounderscore,noitalics]"
# setw -g window-status-current-format "#[fg=colour0,bg=colour8,nobold,nounderscore,noitalics]#[fg=colour15,bg=colour8] #I  #W #[fg=colour8,bg=colour0,nobold,nounderscore,noitalics]"

# # Ensure we can see messages and command prompts
# set -g message-attr bold
# set -g message-fg colour232
# set -g message-bg colour166
