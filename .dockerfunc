#!/bin/bash
# Bash wrappers for docker run commands

# 
# Helper Functions
#
dcleanup(){
  docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}
del_stopped(){
  local name=$1
  local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

  if [[ "$state" == "false" ]]; then
    docker rm $name
  fi
}
relies_on(){
  local containers=$@

  for container in $containers; do
    local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

postgres(){
  del_stopped postgres

  docker run -d \
    -p 5432:5432 \
    -v /postgres/data:/var/lib/postgresql/data \
    -e POSTGRES_PASSWORD=password \
    -e POSTGRES_USER=janders \
    --name postgres \
    postgres:9.4.4
}

pg(){
  docker run -it --link postgres:postgres \
    --rm postgres:9.4.4 \
    sh -c 'exec psql -h "$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U janders'
}

cassandra(){
  del_stopped cassandra

  docker run -d \
    -v /cassandra/data:/var/lib/cassandra/data \
    --name cassandra \
    cassandra:2.2.1
}

cqlsh(){
  docker run -it --link cassandra:cassandra --rm cassandra:2.2.1 cqlsh cassandra
}

mongodb(){
  del_stopped mongo

  docker run -d \
    -v /mongo/data:/data/db \
    --name mongo \
    mongo:3.0.6
}

mongo(){
  docker run -it --link mongo:mongo \
    --rm mongo:3.0.6 \
    sh -c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'
}

redis(){
  del_stopped redis

  docker run -d \
    -v /redis/data:/data \
    --name redis \
    redis:3.0.3 redis-server --appendonly yes
}

redis-cli(){
docker run -it --link redis:redis \
  --rm redis:3.0.3 \
  sh -c 'exec redis-cli -h "$REDIS_PORT_6379_TCP_ADDR" -p "$REDIS_PORT_6379_TCP_PORT"'
}

mutt(){
  # subshell so we dont overwrite variables
  (
  local account=$1

  if [[ "$account" == "docker" ]]; then
    GMAIL=$GMAIL2
    GMAIL_NAME=$GMAIL2_NAME
    GMAIL_PASS=$GMAIL2_PASS
    GMAIL_FROM=$GMAIL2_FROM
  fi

  docker run -it --rm \
    -e GMAIL \
    -e GMAIL_NAME \
    -e GMAIL_PASS \
    -e GMAIL_FROM \
    -v $HOME/.gnupg:/home/user/.gnupg \
    -v /etc/localtime:/etc/localtime:ro \
    --name mutt${account} \
    janders223/mutt
  )
}

chrome(){
  del_stopped chrome

  # one day remove /etc/hosts bind mount when effing
  # overlay support inotify, such bullshit
  docker run -d \
    --memory 2gb \
    --net host \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e DISPLAY=unix$DISPLAY \
    -v $HOME/Downloads:/root/Downloads \
    -v $HOME/.config/google-chrome/:/data \
    -v /etc/hosts:/etc/hosts \
    --device /dev/snd \
    --name chrome \
    jess/chrome --user-data-dir=/data --force-device-scale-factor=1 "$@"

  # exit current shell
  exit 0
}

firefox(){
  del_stopped firefox

  docker run -d \
    --memory 2gb \
    --net host \
    --cpuset-cpus 0 \
    -v /etc/localtime:/etc/localtime:ro \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -v $HOME/.firefox/cache:/root/.cache/mozilla \
    -v $HOME/.firefox/mozilla:/root/.mozilla \
    -v $HOME/Downloads:/root/Downloads \
    -e DISPLAY=unix$DISPLAY \
    -e GDK_SCALE \
    -e GDK_DPI_SCALE \
    --device /dev/snd \
    --name firefox \
    jess/firefox "$@"

  # exit current shell
  exit 0
}
